name: Build and Analyze

on:
  push:
    branches:
      - development

jobs:
  build-and-scan:
    name: Generate SBOM, Upload to Dependency Track, and Run SonarQube Scan
    runs-on: self-hosted #ubuntu-latest

    steps:
      - name: Check Docker Info
        run: docker info

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Complete clone for analysis

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'  # Specify your Go version

      # - name: Build Go project
      #   run: go build ./...

      # # Generate SBOM using CycloneDX-Go
      # - name: Install CycloneDX-Go
      #   run: go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest

      # - name: Generate SBOM with CycloneDX-Go
      #   run: |
      #     /home/runner/go/bin/cyclonedx-gomod mod -licenses -type application -json -output sbom.json .

      # # Convert SBOM to XML using CycloneDX CLI
      # - name: Download CycloneDX CLI
      #   run: |
      #     wget https://github.com/CycloneDX/cyclonedx-cli/releases/download/v0.27.1/cyclonedx-linux-x64
      #     sudo chmod +x cyclonedx-linux-x64
      #     sudo ./cyclonedx-linux-x64 --version

      # - name: Convert SBOM to XML
      #   run: |
      #     ./cyclonedx-linux-x64 convert --input-file sbom.json --output-format xml --output-file sbom.xml

      # # Dependency Track Upload
      # - name: Upload SBOM to Dependency Track
      #   env:
      #     DTRACK_API_URL: ${{ secrets.DTRACK_API_URL }}
      #     DTRACK_API_KEY: ${{ secrets.DTRACK_API_KEY }}
      #     DTRACK_CERT: ${{ secrets.DTRACK_CERT }}
      #   run: |
      #     # Save the certificate to a file for use with curl
      #     echo "$DTRACK_CERT" > dtrack_cert.pem

      #     # Run the curl command using the certificate
      #     curl -X "POST" "$DTRACK_API_URL/api/v1/bom" \
      #       -H "Content-Type: multipart/form-data" \
      #       -H "X-API-Key: $DTRACK_API_KEY" \
      #       --cacert dtrack_cert.pem \
      #       -F "autoCreate=true" \
      #       -F "projectName=TCP_API" \
      #       -F "projectVersion=1.0.2" \
      #       -F "isLatest=true" \
      #       -F "bom=@sbom.xml"

      # - name: List files
      #   run: ls -la /home/runner/work/sample-gitops/sample-gitops/

      # - name: Run SonarQube Scan with Custom Trust Store in Secret of GitHub Actions
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #     SONAR_ROOT_CERT: ${{ secrets.SONARQUBE_CERT }}
      #   uses: sonarsource/sonarqube-scan-action@v3
      #   with:
      #     projectBaseDir: .





















# name: SonarQube Scan Code

# on:
#   push:
#     branches:
#       - development
# jobs:
#   build:
#     name: Build and analyze with SonarQube
#     runs-on: ubuntu-latest
    
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

#       - name: List files
#         run: ls -la /home/runner/work/sample-gitops/sample-gitops/

#       - name: Run SonarQube Scan with Custom Trust Store in Secret of GitHub Actions
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#           SONAR_ROOT_CERT: ${{ secrets.SONARQUBE_CERT }}
#         uses: sonarsource/sonarqube-scan-action@v3
#         with:
#           projectBaseDir: .

#       # Generate SBOM (example uses CycloneDX)
#       - name: Generate SBOM
#         run: |
#           wget https://github.com/CycloneDX/cyclonedx-cli/releases/download/v0.27.1/cyclonedx-linux-x64
#           chmod +x cyclonedx-linux-x64
#           ./cyclonedx-linux-x64 --version

#       # Upload SBOM to Dependency Track
#       - name: Upload SBOM to Dependency Track
#         env:
#           DTRACK_API_KEY: ${{ secrets.DTRACK_API_KEY }}
#           DTRACK_API_URL: ${{ secrets.DTRACK_API_URL }}
#         run: |
#           curl -X POST "$DTRACK_API_URL/api/v1/bom" \
#           -H "Content-Type: application/json" \
#           -H "X-Api-Key: $DTRACK_API_KEY" \
#           --data-binary @sbom.cdx.json




















# - name: Retrieve SonarQube Certificate Chain
      #   run: |
      #     # Retrieve the full certificate chain from SonarQube server
      #     openssl s_client -showcerts -connect sonarqube.z-unified.com:443 </dev/null 2>/dev/null | awk '/BEGIN/,/END/{ if(/BEGIN/){a++}; out="cert"a".pem"; print >out}'
          
      #     # Dynamically concatenate the retrieved certificates into a single full chain file
      #     cat cert*.pem > fullchain.crt || echo "Only one certificate retrieved, proceeding with single certificate."


      # - name: Create a custom Java trust store for SonarQube
      #   run: |
      #     # Create the trust store and import the full certificate chain
      #     keytool -import -alias sonarqube -file fullchain.crt -keystore sonarqube-truststore.jks -storepass changeit -noprompt
      #     keytool -list -v -keystore sonarqube-truststore.jks -storepass changeit

      #SONAR_SCANNER_OPTS: "-Djavax.net.ssl.trustStore=/home/runner/work/sample-gitops/sample-gitops/sonarqube-truststore.jks -Djavax.net.ssl.trustStorePassword=changeit"