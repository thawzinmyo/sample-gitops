name: SonarQube Scan Code

on:
  push:
    branches:
      - development


jobs:
  build:
    name: Build and analyze with SonarQube
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Check out the code
      - name: Check out code
        uses: actions/checkout@v2

      # Step 2: Set up Java (Specify the version you need here)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # Java distribution
          java-version: '17'       # Specify Java version
      - name: Set JAVA_HOME
        run: echo "JAVA_HOME=${{ steps.setup-java.outputs.java-home }}" >> $GITHUB_ENV

      # Step 3: Fetch and Add Self-Signed Certificate to JVM Truststore
      - name: Add Self-Signed Certificate to Truststore
        env:
          JAVA_HOME: ${{ env.JAVA_HOME }}
        run: |
          # Fetch certificate and save as sonar_cert.pem
          openssl s_client -showcerts -connect your-sonarqube-server.com:443 </dev/null 2>/dev/null | openssl x509 -outform PEM > sonar_cert.pem
          
          # Import the certificate to the JVM truststore
          sudo keytool -importcert -file sonar_cert.pem -alias sonar_cert -keystore "$JAVA_HOME/lib/security/cacerts" -storepass changeit -noprompt

      # Step 4: Install SonarScanner CLI
      - name: Install SonarScanner
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
          unzip sonar-scanner.zip
          sudo mv sonar-scanner-4.7.0.2747-linux /opt/sonar-scanner
          sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner

      # Step 5: Run SonarLint Analysis with Debug
      - name: Run SonarLint Analysis with Debug
        env:
          JAVA_HOME: ${{ env.JAVA_HOME }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # Replace with your actual server URL
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Verify Java setup
          echo "Using Java runtime at: $JAVA_HOME"
          
          # Run SonarScanner CLI with debug logging enabled
          sonar-scanner -X -Djavax.net.ssl.trustStore="$JAVA_HOME/lib/security/cacerts" -Djavax.net.ssl.trustStorePasswor
      
      - name: Check Connectivity
        run: |
          nc -zv sonarqube.z-unified.com 443


      - name: Install SSL Certificate in TrustStore
        run: |
          openssl s_client -showcerts -connect sonarqube.z-unified.com:443 </dev/null 2>/dev/null | openssl x509 -outform PEM > sonar_cert.pem
          sudo keytool -importcert -file sonar_cert.pem -alias sonar_cert -cacerts -storepass changeit -noprompt

      - name: Run SonarScanner CLI
        uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          #SONAR_SCANNER_OPTS: "-Dsonar.ssl.verify=false"
          SONAR_SCANNER_OPTS: "-Djavax.net.ssl.trustStore=$JAVA_HOME/lib/security/cacerts -Djavax.net.ssl.trustStorePassword=changeit"
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}